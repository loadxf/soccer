services:
  app:
    build: .
    user: "${UID:-1000}:${GID:-1000}"  # Use host user ID to avoid permission issues
    ports:
      - "8000:8000"
      - "9091:9091"  # Prometheus metrics
    volumes:
      # Mount specific directories instead of the entire project
      - ./src:/app/src
      - ./config:/app/config
      - ./scripts:/app/scripts
      # Use bind mount for data directory instead of named volume for better permission handling
      - ./data:/app/data
      # Use named volume for logs directory
      - app_logs:/app/logs
      # Mount uploads directory as a named volume for better permission handling
      - uploads_data:/app/uploads
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=soccer_prediction
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "python scripts/fix_permissions.py &&
               uvicorn src.api.server:app --host 0.0.0.0 --port 8000 --reload"
    networks:
      - soccer-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "exit", "1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.simple
      args:
        - NODE_ENV=production
    ports:
      - "3001:80"  # Map port 80 in container to 3001 on host (changed from 3000)
    environment:
      - REACT_APP_API_URL=http://app:8000
      - REACT_APP_ENVIRONMENT=docker
      - REACT_APP_ENABLE_SERVICE_WORKER=true
    depends_on:
      app:
        condition: service_healthy
    networks:
      - soccer-net
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ui:
    build:
      context: .
      dockerfile: ui/Dockerfile
    ports:
      - "8501:8501"  # Streamlit default port
    volumes:
      - ./ui:/app/ui
      - ./config:/app/config
      - ./.kaggle:/root/.kaggle  # Mount .kaggle directory for credentials
      - ./src:/app/src  # Mount the src directory so Python can find the modules
      - ./scripts:/app/scripts  # Mount scripts directory
      - uploads_data:/app/uploads  # Share uploads with app container
      - /dev/urandom:/dev/random:ro  # Add access to entropy source
    depends_on:
      app:
        condition: service_healthy
    command: bash -c "chmod +x /app/ui/start_app.sh && /app/ui/start_app.sh"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - PYTHONHASHSEED=0  # Add fixed hash seed for reproducibility and to help with entropy issues
      - PYTHONUNBUFFERED=1
      - RANDOM_SEED=42  # Add fixed seed for any randomness
      - TF_DETERMINISTIC_OPS=1  # Make TensorFlow operations deterministic
      - API_HOST=app
      - API_PORT=8000
    restart: always
    networks:
      - soccer-net

  db:
    image: postgres:13
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=soccer_prediction
    networks:
      - soccer-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - db
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    networks:
      - soccer-net

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/app
      # Create logs directory for tests
      - ./logs:/app/logs
    env_file:
      - .env.test
    depends_on:
      - db_test
    command: pytest tests/ -v
    networks:
      - soccer-net

  db_test:
    image: postgres:13
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=soccer_prediction_test
    networks:
      - soccer-net

  # Monitoring services
  prometheus:
    image: prom/prometheus:v2.46.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - soccer-net
    container_name: prometheus
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    networks:
      - soccer-net
    container_name: alertmanager
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - soccer-net
    container_name: grafana
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.6.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - soccer-net
    container_name: node-exporter
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - soccer-net
    container_name: soccer-cadvisor
    restart: unless-stopped
    command:
      - '--docker_only=true'
      - '--housekeeping_interval=10s'

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.14.0
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@db:5432/soccer_prediction?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - db
    networks:
      - soccer-net
    container_name: postgres-exporter
    restart: unless-stopped

networks:
  soccer-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  app_logs:
  uploads_data: 